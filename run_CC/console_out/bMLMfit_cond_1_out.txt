WARNING: unknown option '--no_save'


R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> rm(list=ls())
> 
> library(brms)   # for model fitting
Loading required package: Rcpp
Loading 'brms' package (version 2.19.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following object is masked from ‘package:stats’:

    ar

> source('fx.R')  # for simulation
Loading required package: coda
Loading required package: MASS
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2023 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##

Attaching package: ‘MCMCpack’

The following objects are masked from ‘package:brms’:

    ddirichlet, rdirichlet


Attaching package: ‘matrixcalc’

The following object is masked from ‘package:MCMCpack’:

    vech

> 
> # convenience function for diagnostics summary
> diag_p = function(x) bayestestR::diagnostic_posterior(x, effects='all')
> 
> options(mc.cores=2) # 2 chains per model
> 
> 
> # Specify constants (to be replaced) --------------------------------------
> COND  = 1
> CONST = c(20,10,1,0.04,0.2,0.04,0.2,0,0,0,0.1,0,0,0,0,0,1,1,1,100,2,3000,1000,1,0.84)
> names(CONST) = c("N", "J", "G00", "TAU0", "G10", "TAU1", "G20", "TAU2", 
+                  "G30", "TAU3", "RHO01", "RHO02", "RHO12", "X1_mu", 
+                  "X2_mu", "X3_mu", "X1_sd", "X2_sd", "X3_sd", "S", 
+                  "nchain","niter","burn","thin", "SIG2")
> CONST = as.data.frame(t(CONST))
> 
>   
> # Compile models ----------------------------------------------------
> # Fit initial model to dummy data, then just call update below to avoid recompiling time.
> # This is OS-specific, so has to be run once on the cluster before each simulation cell.
> # Fit five models:
> # A. True model
> # B. The (incorrect) absence of a random effect (TAU1 = 0)
> # C. The (incorrect) presence of a random effect (TAU2 > 0) 
> # D. The (incorrect) absence of a fixed effect (G20 = 0)
> # E. The (incorrect) presence of a fixed effect (G30 != 0)
> 
> DM    = expand.grid(1:10,1:10) # design matrix (dummy N & J)
> DM$X1 = rnorm(nrow(DM)) # mean and sd don't matter here, just setting up model structure
> DM$X2 = rnorm(nrow(DM))
> DM$X3 = rnorm(nrow(DM))
> DM$y  = rnorm(nrow(DM)) # same for the outcome
> colnames(DM) = c('obs','g','X1','X2','X3', 'y')
> 
> options(mc.cores=CONST$nchain)
> 
> modA = brm(y ~ 1 + X1 + X2 + (X1|g),      data=DM, chains=CONST$nchain, iter=CONST$niter, warmup=CONST$burn, thin=CONST$thin, silent = 2)
