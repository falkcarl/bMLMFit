ylim = range(pretty(c(md+ed+.1, md-ed-.1)))
## loop through pars for each plot
for(p in (PARS)) {
b = barplot(md[,,p], beside=T, ylim=ylim, xpd=F,
xlab='Model', ylab=expression('Avg. '~Delta),
main=titles[[p]],
legend.text = T,
args.legend = list(x=leg_pos,bty='n', cex=1,
title=leg_title))
arrows(b, md[,,p]-ed[,,p], b, md[,,p]+ed[,,p], length=0)
}
mtext(group_title, side=3, line=-1.25, outer=TRUE, cex=1, font=3)
dev.off()
}
## model X gamma ----------------------------------------------------------
# Avg. error in fixefs array. Dims:
# 1: models (1-5)
# 2: coef (g0,g1,g2)
### overall
bias_barplot_2way('figs/bias/delta_fixef_barplot.pdf',
c('g0','g1','g2'),
legend_text = c(expression(gamma['00']),
expression(gamma[10]),
expression(gamma[20])))
### conditional
bias_barplot_2way('figs/bias/delta_fixef_barplot_conditional.pdf',
c('g0','g1','g2'),
legend_text = c(expression(gamma['00']),
expression(gamma[10]),
expression(gamma[20])),
est_idx = '0', main_title="Conditional Estimation")
### marginal
bias_barplot_2way('figs/bias/delta_fixef_barplot_marginal.pdf',
c('g0','g1','g2'),
legend_text = c(expression(gamma['00']),
expression(gamma[10]),
expression(gamma[20])),
est_idx = '1', main_title="Marginal Estimation")
## model X tau ----------------------------------------------------------
# Avg. error in fixefs array. Dims:
# 1: models (1-5)
# 2: coef (g0,g1,g2)
### overall
bias_barplot_2way('figs/bias/delta_ranef_barplot.pdf',
c('t0','t1'), leg_pos = 'topleft',
legend_text = c(expression(tau['0']),
expression(tau['1'])))
### conditional
bias_barplot_2way('figs/bias/delta_ranef_barplot_conditional.pdf',
c('t0','t1'), leg_pos = 'topleft',
legend_text = c(expression(tau['0']),
expression(tau['1'])),
est_idx = '0', main_title="Conditional Estimation")
### marginal
bias_barplot_2way('figs/bias/delta_ranef_barplot_marginal.pdf',
c('t0','t1'), leg_pos = 'topleft',
legend_text = c(expression(tau['0']),
expression(tau['1'])),
est_idx = '1', main_title="Marginal Estimation")
## model X par X n ----------------------------------------------------------
### overall
bias_barplot_3way('figs/bias/delta_n_barplot.pdf', 3, leg_title = 'Cluster Size')
### conditional
bias_barplot_3way('figs/bias/delta_n_barplot_conditional.pdf', 3, leg_title = 'Cluster Size',
est_idx = '0',
group_title = 'Conditional Estimation')
### marginal
bias_barplot_3way('figs/bias/delta_n_barplot_marginal.pdf', 3, leg_title = 'Cluster Size',
est_idx = '1',
group_title = 'Marginal Estimation')
## model X par X j ----------------------------------------------------------
### overall
bias_barplot_3way('figs/bias/delta_j_barplot.pdf', 4, leg_title = 'Observation Size')
### conditional
bias_barplot_3way('figs/bias/delta_j_barplot_conditional.pdf', 4, leg_title = 'Observation Size',
est_idx = '0',
group_title = 'Conditional Estimation')
### marginal
bias_barplot_3way('figs/bias/delta_j_barplot_marginal.pdf', 4, leg_title = 'Observation Size',
est_idx = '1',
group_title = 'Marginal Estimation')
# IC Performance without Uncertainty -------------------------------------------------------------
## Model accurate model selection -----------
# compute accuracy
for(i in FIT_ICS){
dat[,paste0('acc_',i)] = as.numeric(dat[,paste0('win_',i)]==TRUE_MOD)
}
# melt df
melt_dat = melt(dat, id.vars = IVS,
measure.vars = paste0('acc_',FIT_ICS),
variable.name = 'ic',
value.name = 'accuracy')
melt_dat$ic = sapply(melt_dat$ic, function(x)
strsplit(as.character(x), split = '_')[[1]][2])
# make fit index a factor
melt_dat$ic = factor(melt_dat$ic, levels = c('DIC','WAIC','LOO'))
# center predictors
melt_dat[,IVS] = apply(melt_dat[,IVS],2,function(x) x - median(unique(x)))
# fit
# acc_mod = glm(accuracy ~ ic*marg*N*J,
#               data=melt_dat,
#               family='binomial')
#
# capture.output(summary(acc_mod), file = 'out/acc_model_summary.txt')
#
## Visualize performance ---------------------------------------------------
## Melt
melt_dat = melt(dat,
id.vars = IVS,
measure.vars = paste0('acc_',FIT_ICS),
variable.name = 'ic',
value.name = 'accuracy')
melt_dat$ic = sapply(melt_dat$ic, function(x)
strsplit(as.character(x), split = '_')[[1]][2])
melt_dat$marg = ifelse(melt_dat$marg==0, 'Conditional', 'Marginal')
## Accurate model selection ------------------------------------------------
### ICs --------
#### overall --------------
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_barplot.pdf', 6, 6)
## Compute accuaracy and error
pcor = tapply(melt_dat$accuracy, melt_dat$ic, mean)
elb  = tapply(melt_dat$accuracy, melt_dat$ic, ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, melt_dat$ic, ci_binom, bound=2)
bp = barplot(pcor, ylim=c(0,1.1), ylab='P(Correct)')
arrows(bp, elb, bp, eub,length=0)
dev.off()
#### by estimation strategy --------------
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_barplot_by_strat.pdf', 6, 6)
pcor = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), ci_binom, bound=2)
bp = barplot(pcor, beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Estimation Approach'))
arrows(bp, elb, bp, eub,length=0)
dev.off()
### ICs X N --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_barplot.pdf', 6, 6)
bp = barplot(apply(pcor, 1:2, mean), beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, apply(elb, 1:2, mean), bp, apply(eub, 1:2, mean),length=0)
dev.off()
### conditional
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_barplot_conditional.pdf', 6, 6)
bp = barplot(pcor[,,1], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T, main='Conditional Estimation',
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,1], bp, eub[,,1],length=0)
dev.off()
### marginal
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_barplot_marginal.pdf', 6, 6)
bp = barplot(pcor[,,2], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T, main='Marginal Estimation',
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,2], bp, eub[,,2],length=0)
dev.off()
### ICs X J --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_j_barplot.pdf', 6, 6)
bp = barplot(apply(pcor, 1:2, mean), beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, apply(elb, 1:2, mean), bp, apply(eub, 1:2, mean),length=0)
dev.off()
### conditional
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_j_barplot_conditional.pdf', 6, 6)
bp = barplot(pcor[,,1], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T, main='Conditional Estimation',
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,1], bp, eub[,,1],length=0)
dev.off()
### marginal
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_j_barplot_marginal.pdf', 6, 6)
bp = barplot(pcor[,,2], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T, main='Marginal Estimation',
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,2], bp, eub[,,2],length=0)
dev.off()
### ICs X N X J --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_j_barplot.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(apply(pcor, 1:3, mean)[,,ic], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, apply(elb, 1:3, mean)[,,ic], bp, apply(eub, 1:3, mean)[,,ic],length=0)
}
dev.off()
### conditional
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_j_barplot_conditional.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(pcor[,,ic,1], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,ic,1], bp, eub[,,ic,1],length=0)
}
mtext('Conditional Estimation', side=3, line=-1.25, outer=TRUE, cex=1, font=3)
dev.off()
### marginal
pdf('figs/ic_performance/wo_uncertainty/pcorrect_ic_n_j_barplot_marginal.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(pcor[,,ic,2], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,ic,2], bp, eub[,,ic,2],length=0)
}
mtext('Marginal Estimation', side=3, line=-1.25, outer=TRUE, cex=1, font=3)
dev.off()
## Overall model selection -------------------------------------------------
#' create indexable array with proportions of model selection per:
#'    1. Fit index
#'    2. Model selected
#'    3. N
#'    4. J
#'    5. Tau0
#'    6. Tau1
#'    7. gamma10
#'    8. gamma20
#'    9. Estimation strategy
mod_select = array(NA,dim = c(length(FIT_ICS),
length(MODELS),
length(unique(dat$N)),
length(unique(dat$J)),
length(unique(dat$marg))),
dimnames = list(FIT_ICS,
MODELS,
unique(dat$N),
unique(dat$J),
unique(dat$marg))
)
for(i in FIT_ICS) {
win_vec = dat[,paste0('win_',i)]
for(m in MODELS) {
mod_select[i,m,,,] = tapply(win_vec,
list(dat$N,
dat$J,
dat$marg),
function(x) mean(x==m, na.rm=T))
}
}
#' Convenience function to visualize model selection rates across ICs
#'
#' @param fname file name to save figues
#' @param leg_title legend title
#' @param main_title plot title
#' @param leg_pos legend position
#' @param ic_idx which ICs to use
#' @param est_idx which estimation stategy to use (defaults to average across strats)
IC_barplot_modselect = function(fname,
cond_idx,
main_title='',
leg_pos='topright',
ic_idx=1,est_idx=1:2)
{
## Compute choice rates
pchoose = apply(mod_select[,,,,est_idx], c(ic_idx,2), mean)
echoose = apply(mod_select[,,,,est_idx], c(ic_idx,2), ci)
## Visualize
pdf(fname, 6, 6)
bp = barplot(pchoose, beside=T, ylim=c(0,1),
xlab='Chosen Model', ylab='P(Chosen)',
main=main_title,
names.arg = LETTERS[1:5],
legend.text = T,
args.legend =
list(x=leg_pos,
bty='n'))
arrows(bp,pchoose-echoose,bp,pchoose+echoose,length=0)
abline(h=1/length(MODELS),lty=2)
dev.off()
}
### overall
IC_barplot_modselect('figs/ic_performance/wo_uncertainty/overall_mod_select_barplot.pdf')
### conditional
IC_barplot_modselect('figs/ic_performance/wo_uncertainty/overall_mod_select_barplot_conditional.pdf',
est_idx = '0', main_title = 'Conditional Estimation')
### marginal
IC_barplot_modselect('figs/ic_performance/wo_uncertainty/overall_mod_select_barplot_marginal.pdf',
est_idx = '1', main_title = 'Marginal Estimation')
### Create table with proportions -------------------------------------------
prop_table = melt(mod_select,
varnames = c('IC','Model',IVS),
value.name = 'p_choose')
write.csv(prop_table,'out/prop_table.csv')
# IC Performance With Uncertainty -------------------------------------------------------------
## Model accurate model selection -----------
# compute accuracy
for(i in FIT_ICS){
dat[,paste0('acc_1se_',i)] = as.numeric(dat[,paste0('win_1se_',i)]==TRUE_MOD)
}
# melt df
melt_dat = melt(dat, id.vars = IVS,
measure.vars = paste0('acc_1se_',FIT_ICS),
variable.name = 'ic',
value.name = 'accuracy')
melt_dat$ic = sapply(melt_dat$ic, function(x)
strsplit(as.character(x), split = '_')[[1]][3])
# make fit index a factor
melt_dat$ic = factor(melt_dat$ic, levels = c('DIC','WAIC','LOO'))
# center predictors
melt_dat[,IVS] = apply(melt_dat[,IVS],2,function(x) x - median(x))
# fit
# acc_mod_1se = glm(accuracy ~ ic*marg*N*J,
#               data=melt_dat,
#               family='binomial')
#
# capture.output(summary(acc_mod_1se), file = 'out/acc_model_1se_summary.txt')
## Melt
melt_dat = melt(dat,
id.vars = IVS,
measure.vars = paste0('acc_1se_',FIT_ICS),
variable.name = 'ic',
value.name = 'accuracy')
melt_dat$ic = sapply(melt_dat$ic, function(x)
strsplit(as.character(x), split = '_')[[1]][3])
melt_dat$ic = factor(melt_dat$ic, levels = c('DIC','WAIC','LOO'))
melt_dat$marg = ifelse(melt_dat$marg==0, 'Conditional', 'Marginal')
## Accurate model selection ------------------------------------------------
### ICs --------
#### overall --------------
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_barplot.pdf', 6, 6)
## Compute accuaracy and error
pcor = tapply(melt_dat$accuracy, melt_dat$ic, mean)
elb  = tapply(melt_dat$accuracy, melt_dat$ic, ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, melt_dat$ic, ci_binom, bound=2)
bp = barplot(pcor, ylim=c(0,1.1), ylab='P(Correct)')
arrows(bp, elb, bp, eub,length=0)
dev.off()
#### by estimation strategy --------------
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_barplot_by_strat.pdf', 6, 6)
pcor = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$marg, melt_dat$ic), ci_binom, bound=2)
bp = barplot(pcor, beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Estimation Approach'))
arrows(bp, elb, bp, eub,length=0)
dev.off()
### ICs X N --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_barplot.pdf', 6, 6)
bp = barplot(apply(pcor, 1:2, mean), beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, apply(elb, 1:2, mean), bp, apply(eub, 1:2, mean),length=0)
dev.off()
### conditional
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_barplot_conditional.pdf', 6, 6)
bp = barplot(pcor[,,1], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,1], bp, eub[,,1],length=0)
dev.off()
### marginal
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_barplot_marginal.pdf', 6, 6)
bp = barplot(pcor[,,2], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,2], bp, eub[,,2],length=0)
dev.off()
### ICs X J --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_j_barplot.pdf', 6, 6)
bp = barplot(apply(pcor, 1:2, mean), beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, apply(elb, 1:2, mean), bp, apply(eub, 1:2, mean),length=0)
dev.off()
### conditional
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_j_barplot_conditional.pdf', 6, 6)
bp = barplot(pcor[,,1], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,1], bp, eub[,,1],length=0)
dev.off()
### marginal
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_j_barplot_marginal.pdf', 6, 6)
bp = barplot(pcor[,,2], beside=T, ylim=c(0,1.1), ylab='P(Correct)',
legend.text = T,
args.legend = list(x='topleft', bty='n', title='Cluster Size',ncol=3))
arrows(bp, elb[,,2], bp, eub[,,2],length=0)
dev.off()
### ICs X N X J --------
pcor = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), mean)
elb  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=1)
eub  = tapply(melt_dat$accuracy, list(melt_dat$J, melt_dat$N, melt_dat$ic, melt_dat$marg), ci_binom, bound=2)
### overall
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_j_barplot.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(apply(pcor, 1:3, mean)[,,ic], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, apply(elb, 1:3, mean)[,,ic], bp, apply(eub, 1:3, mean)[,,ic],length=0)
}
dev.off()
### conditional
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_j_barplot_conditional.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(pcor[,,ic,1], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,ic,1], bp, eub[,,ic,1],length=0)
}
mtext('Conditional Estimation', side=3, line=-1.25, outer=TRUE, cex=1, font=3)
dev.off()
### marginal
pdf('figs/ic_performance/w_uncertainty/pcorrect_ic_n_j_barplot_marginal.pdf', 8, 4)
par(mar=c(5, 4, 6, 2) + 0.1)
layout(matrix(1:3,1,3))
for(ic in FIT_ICS) {
bp = barplot(pcor[,,ic,2], beside=T, ylim=c(0,1.1),
ylab='P(Correct)', xlab="Cluster Size",
legend.text = T,
main=ic,
args.legend = list(x='topleft', bty='n', title='Observation Size',ncol=3))
arrows(bp, elb[,,ic,2], bp, eub[,,ic,2],length=0)
}
mtext('Marginal Estimation', side=3, line=-1.25, outer=TRUE, cex=1, font=3)
dev.off()
## Overall model selection -------------------------------------------------
#' create indexable array with proportions of model selection per:
#'    1. Fit index
#'    2. Model selected
#'    3. N
#'    4. J
#'    5. Tau0
#'    6. Tau1
#'    7. gamma10
#'    8. gamma20
#' but this time, incorporate the following uncertainty metrics:
#'    DIC : at least 4 points difference
#'    WAIC: 1 SE difference
#'    LOO : 1 SE difference
#' these are compared between top-2 models and
#' simpler model is chosen in the case of no robust difference
#' (see data/parse_output_nested.R for implementation)
# specify model complexity per model
# (ignoring random effect estimates per cluster)
mod_select = array(NA,dim = c(length(FIT_ICS),
length(MODELS),
length(unique(dat$N)),
length(unique(dat$J)),
length(unique(dat$marg))),
dimnames = list(FIT_ICS,
MODELS,
unique(dat$N),
unique(dat$J),
unique(dat$marg))
)
for(i in FIT_ICS) {
win_vec = dat[,paste0('win_1se_',i)]
for(m in MODELS) {
mod_select[i,m,,,] = tapply(win_vec,
list(dat$N,
dat$J,
dat$marg),
function(x) mean(x==m))
}
}
### overall
IC_barplot_modselect('figs/ic_performance/w_uncertainty/overall_mod_select_barplot.pdf',
leg_pos = 'topright')
### conditional
IC_barplot_modselect('figs/ic_performance/w_uncertainty/overall_mod_select_barplot_conditional.pdf',
est_idx = '0', main_title = 'Conditional Estimation',
leg_pos = 'topright')
### marginal
IC_barplot_modselect('figs/ic_performance/w_uncertainty/overall_mod_select_barplot_marginal.pdf',
est_idx = '1', main_title = 'Marginal Estimation',
leg_pos = 'topright')
### Create table with proportions -------------------------------------------
prop_table = melt(mod_select,
varnames = c('IC','Model',IVS),
value.name = 'p_choose')
write.csv(prop_table,'out/prop_table_1se.csv')
